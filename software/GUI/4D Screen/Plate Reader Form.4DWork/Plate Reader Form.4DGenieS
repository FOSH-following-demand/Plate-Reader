#platform "Gen4-uLCD-32DT"


// generated 7/19/2019 12:29:50 PM

#MODE FLASHBANK_0

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"


#inherit "Plate Reader FormConst.inc"


#constant IPDatasize 22

#CONST
    CMDLenMAX   80
    seroutX     $serout
    serinX      $serin
#END

#CONST
    ColorBGimage     0x0020
    ACK         0x06
    NAK         0x15
    ReadCmd     0x80
    WriteCmd    0x00
//  IPD_TYPE    0 // offsets are doubled as FLASH is byte addressable
    Ofs_IPD_P1      2
    Ofs_IPD_P2      4
    Ofs_IPD_P3      6
    Ofs_IPD_P4      8
    Ofs_IPD_P5      10
    Ofs_IPD_P6      12
    Ofs_IPD_P7      14
    Ofs_IPD_DOWN    16
    Ofs_IPD_RELEASE 18
    Ofs_IPD_OBJVIDX 20
// object indexes
    tDipSwitch      0
    tKnob           1
    tRockerSwitch   2
    tRotarySwitch   3
    tGSlider        4
    tTrackbar       5
    tWinButton      6
    tAngularmeter   7   // need to implement use of this, inputs must be ordered first
    tCoolgauge      8
    tCustomdigits   9
    tForm           10
    tGauge          11
    tImage          12
    tKeyboard       13  // this is a special input, does not need to be at front
    tLed            14
    tLeddigits      15
    tMeter          16
    tStrings        17  // also need output strings code
//    tStringUNI      0x3f | 0x40
//    tStringANSII    0x3f
    tThermometer    18
    tUserled        19
    tVideo          20
    tStaticText     21
// Remove, check for non visual objects instead
//    MaxVisObjects   21  // objects that have a visual component 
    tSounds         22
    tTimer          23
    tSpectrum       24
    tScope          25
    tTank           26
    tUserImages     27
    tPinOutput      28
    tPinInput       29 
    t4Dbutton       30    // more inputs 
    tAniButton      31
    tColorPicker    32 
    tUserButton     33     
    tMagicObject    34     
    MaxTotObjects   33 // objects in objects array
//    OT_DISPLAY      22
    OT_REPORT       100
    OT_SETCONST     101
    OT_SETANOTHER   102
    OT_ACTIVATE     103
    OT_NEXTFRAME    104
    OT_PREVFRAME    105
    OT_NEXTSTRING   106
    OT_PREVSTRING   107
    OT_MAGIC        108
// other OT_s Form activate,
// Indexes into LedDigits and CustomDigits arrays
    Ofs_Digits_Left           0
    Ofs_Digits_Digits         2
    Ofs_Digits_MinDigits      4
    Ofs_Digits_Widthdigit     6
    Ofs_Digits_LeadingBlanks  8
// indexes to Strings arrays
    Ofs_String_StartH        0
    Ofs_String_StartL        2
    Ofs_String_Size          4
    Ofs_String_x1            6
    Ofs_String_y1            8
    Ofs_String_x2            10
    Ofs_String_y2            12
    Ofs_String_FGColor       14
    Ofs_String_BGColor       16
    Ofs_String_FontAttribs   18
    Ofs_String_Transparent   20 // bit transparent should 'refresh' background, otherwise rectangle out
    Ofs_String_Ansi          22 // bit defines write/draw routine
    Ofs_String_Form          24 // form this string can be seen in
// Command codes
    READ_OBJ        0
    WRITE_OBJ       1
    WRITE_STR       2
    WRITE_STRU      3
    WRITE_CONTRAST  4
    REPORT_OBJ      5
    REPORT_EVENT    7
    WRITE_MAGIC_BYTES 8
    WRITE_MAGIC_DBYTES  9
    REPORT_MAGIC_EVENT_BYTES 10
    REPORT_MAGIC_EVENT_DBYTES 11
// End P1.inc
    nObjects        32
    nInputs         34
    nAniTimers      0
#END

#DATA
    word FormStartIndex 0, 17, 23, 27
    word FormEndIndex 17, 23, 27, 32
    word InputControls 0, 22, 66, 110, 154, 176, 198, 220, -1, 242, 264, -1, -1, -1, -1, -1, -1, 286, 330, 374, 418, -1, -1, 440, 484, 506, 550, 594, 638, 682, 704
    word InputData tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 2,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 44, 4,
                OT_ACTIVATE, 10, 2, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 88, 6,
                OT_ACTIVATE, 10, 3, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 132, 8,
                OT_ACTIVATE, 10, 1, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 10,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 12,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 14,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 16,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 18,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 20,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 308, 22,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 352, 24,
                OT_ACTIVATE, 10, 2, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 396, 26,
                OT_ACTIVATE, 10, 3, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 28,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 462, 30,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 32,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 528, 34,
                OT_ACTIVATE, 10, 3, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 572, 36,
                OT_ACTIVATE, 10, 1, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 616, 38,
                OT_ACTIVATE, 10, 0, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 660, 40,
                OT_ACTIVATE, 10, 2, 0, 18, 0, 0, 0, 0, 0, 0,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 0, 42,
                tWinButton, 1, -1, -1, -1, -1, -1, -1, 0, 726, 44,
                OT_ACTIVATE, 10, 1, 0, 18, 0, 0, 0, 0, 0, 0
    word oDipSwitchs 0
    word oKnobs 0
    word oRockerSwitchs 0
    word oRotarySwitchs 0
    word oGSliders 0
    word oTrackbars 0
    word oWinButtons 22, iWinbutton0, iWinbutton1, iWinbutton2, iWinbutton3, iWinbutton4, iWinbutton5, iWinbutton6, iWinbutton7, iWinbutton8, iWinbutton9, iWinbutton10, iWinbutton11, iWinbutton12, iWinbutton13, iWinbutton14, iWinbutton15, iWinbutton16, iWinbutton17, iWinbutton18, iWinbutton19, iWinbutton20, iWinbutton21
    word oAngularmeters 0
    word oCoolgauges 0
    word oCustomdigitss 0
    word oForms 4, -1, -1, -1, -1
    word oGauges 0
    word oImages 0
    word oKeyboards 0
    word oLeds 0
    word oLeddigitss 0
    word oMeters 0
    word oStringss 0
    word oThermometers 0
    word oUserleds 0
    word oVideos 0
    word oStaticTexts 23, iStatictext0, iStatictext1, -1, -1, -1, -1, -1, -1, -1, -1, iStatictext10, -1, iStatictext12, -1, iStatictext14, iStatictext15, -1, -1, -1, iStatictext19, iStatictext20, iStatictext21, iStatictext22
    word oSpectrums 0
    word oScopes 0
    word oTanks 0
    word oUserImagess 0
    word oPinInputs 0
    word o4Dbuttons 0
    word oAniButtons 0
    word oColorPickers 0
    word oUserButtons 0
    word oMagicObjects 0
    word oSmartGauges 0
    word oSmartSliders 0
    word oSmartKnobs 0
    word oTimers 0
    word oSoundss 0
    word oPinOutputs 0
    word FormBGcolors 0xB73F, 0xB73F, 0xB73F, 0xB73F
    word kKeyboardKeystrokes -1
    word rKeyboardRoutines -1
#END

// Start P2.inc
var oObjects[MaxTotObjects+1] ;                 // address of objects
var CurrentForm, oldn, ImageTouched ;
var TouchXpos, TouchYpos ;
var InputType, TouchState, CurInputData, pInputIndex ;
var comRX[40], cmd[CMDLenMAX] ;

var InputCS, OutputCS ;



func seroutCS(var op)
    serout(op) ;
    OutputCS ^= op ;
endfunc

func nak0()
    serout(NAK) ;
    InputCS := 0 ;
endfunc

func seroutOcs()
    serout(OutputCS) ;
    OutputCS := 0 ;
endfunc

func SendReport(var id, var objt, var objn, var val)
    seroutCS(id) ;
    seroutCS(objt) ;
    seroutCS(objn) ;
    seroutCS(val >> 8) ; // first 8 bits
    seroutCS(val) ;
    seroutOcs() ;
endfunc


func ReadObject(var ObjectType, var ObjectIdx)
    var j, k, Objects ;
    Objects := *(oObjects+ObjectType) ;

    j := 2 + ObjectIdx * 2 + Objects ;
     if (ObjectType == tForm)
        k := CurrentForm ;
        else
        k := img_GetWord(hndl, *j, IMAGE_INDEX);
        if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
                                                                                                                                                    // determine if button is momentary or not which is needed for correct answer.
    endif
    SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
endfunc


func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
    var i, j, k, Objects ;
    ObjectType &= 0x3f ;
    if (ObjectType == tForm)
        ActivateForm(ObjectIdx) ;
    else
        Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
        i := *(Objects) ;
        switch (ObjectType)
            case tWinButton :
                j := InputControls[oWinButtons[ObjectIdx+1]] ;
                break ;
            default : j := -1 ;
        endswitch
        if (j != -1)
            k := img_GetWord(hndl, i , IMAGE_INDEX) ;
            NewVal := NewVal << 1 ;
            if (OVF())      // button group index change
                if (*(j+InputData+Ofs_IPD_P1))
                    k &= 1 ;    // mask off old group index for momentary
                else
                    k &= 3 ;    // mask off old group index for toggle
                endif
            else            // normal set
                if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
                k &= 0xfffc ;    // retain only group index for state set
            endif
            NewVal |= k ;
        endif
            img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
            img_Show(hndl, i) ; // will only display if form is current
    endif
endfunc

func TurnOffButtons(var group)
    var j, k, l;
    for (j := 0; j < nInputs; j++)
        k := j*IPDatasize ;
        if (*(InputData+k+Ofs_IPD_P2) == group)
            l := -1 ;
             if (*(InputData+k) == tWinButton)
                l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
                img_SetWord(hndl, l, IMAGE_INDEX, 0);
                img_Show(hndl, l);      // only shows on current form
            endif
        endif
    next
endfunc




func ActivateForm(var newform)
    var i, j, *p ;

    if (CurrentForm != -1) // deactivate old form, by disabling all inputs
        for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
            if (img_GetWord(hndl, i, IMAGE_TAG))
                img_Disable(hndl,i) ;
            endif
        next
    endif
    CurrentForm := newform ;
    // display newform image or clear to image color
    if (FormBGcolors[CurrentForm] != ColorBGimage)
        gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
        gfx_Cls() ;
        DoGFXObjects() ;                                    // display GFX 'widgets'
    endif

    // enable inputs
    for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
        j := img_GetWord(hndl, i, IMAGE_TAG) ;
        if (j)
            j-- ;
            img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
            //if (j != tKeyboard)
            if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
                img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
            endif
            img_Show(hndl,i) ; // show initialy, if required
            if (j == tForm)
                DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
            endif
        endif
    next

endfunc

func UpdateObjects(var newval)
    var IPidx, otherOBJ ;
    if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release

        img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
            img_Show(hndl, *(pInputIndex));      // only shows on current form
        if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
            if (*(CurInputData+Ofs_IPD_P1))
                newval &= 1;
            else
                newval &= 3;
            endif
            if (newval > 1) newval := 1;
        endif
        IPidx := *(CurInputData+TouchState) ;
        while(IPidx != 0)
            otherOBJ := IPidx + InputData;
            if (*(otherOBJ) == OT_REPORT)
        SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
            else if (*(otherOBJ) == OT_MAGIC)
                IPidx := *(otherOBJ+Ofs_IPD_P5) ;
                IPidx(newval) ;
            else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
                if (*(otherOBJ) == OT_ACTIVATE)
                    ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
                    InputType := tForm ;
                else if (*(otherOBJ) == OT_SETCONST)
                    newval := *(otherOBJ+Ofs_IPD_P3) ;
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_SETANOTHER)
                    WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
                else if (*(otherOBJ) == OT_PREVFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                else if (*(otherOBJ) == OT_NEXTFRAME)
                    if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
                        WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
                    endif
                    newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
                endif
            endif
            IPidx := *(otherOBJ+TouchState) ;
        wend
    endif
endfunc

// End P2.inc
func DoGFXObjects()
    switch (CurrentForm)
        case 0:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 35, 319, 64, CORNFLOWERBLUE) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(8, 40, 108, 59, WHITE) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(0, 67, 229, 240, WHITE) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(GRAY) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_RectangleFilled(0, 125, 229, 182, WHITE) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_OutlineColour(GRAY) ;
            gfx_LinePattern(LPSOLID) ;
            gfx_RectangleFilled(0, 182, 229, 239, WHITE) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
        break ;
        case 3:
            gfx_OutlineColour(WHITE) ;
            gfx_LinePattern(LPFINE) ;
            gfx_RectangleFilled(5, 39, 255, 224, WHITE) ;
            gfx_OutlineColour(BLACK) ;
            gfx_LinePattern(LPSOLID) ;
        break ;
    endswitch
endfunc

// Start P3.inc
func main()
    var comTX[50], cmdi, i, j, TouchStatus ;


    gfx_ScreenMode(LANDSCAPE) ;

    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
//    gfx_MoveTo(0, 0);
//    print(mem_Heap()," ") ;
//    gfx_TransparentColour(0x0020);
//    gfx_Transparency(ON);

    // open image control
    hndl := file_LoadImageControl("Plate_Re.dat", "Plate_Re.gci", 1);

    // init 'constants'
// End P3.inc

    oObjects[tDipSwitch] := oDipSwitchs ;
    oObjects[tKnob] := oKnobs ;
    oObjects[tRockerSwitch] := oRockerSwitchs ;
    oObjects[tRotarySwitch] := oRotarySwitchs ;
    oObjects[tGSlider] := oGSliders ;
    oObjects[tTrackbar] := oTrackbars ;
    oObjects[tWinButton] := oWinButtons ;
    oObjects[tAngularmeter] := oAngularmeters ;
    oObjects[tCoolgauge] := oCoolgauges ;
    oObjects[tCustomdigits] := oCustomdigitss ;
    oObjects[tForm] := oForms ;
    oObjects[tGauge] := oGauges ;
    oObjects[tImage] := oImages ;
    oObjects[tKeyboard] := oKeyboards ;
    oObjects[tLed] := oLeds ;
    oObjects[tLeddigits] := oLeddigitss ;
    oObjects[tMeter] := oMeters ;
    oObjects[tStrings] := oStringss ;
    oObjects[tThermometer] := oThermometers ;
    oObjects[tUserled] := oUserleds ;
    oObjects[tVideo] := oVideos ;
    oObjects[tStaticText] := oStaticTexts ;
    oObjects[tSounds] := oSoundss ;
    oObjects[tTimer] := oTimers ;
    oObjects[tSpectrum] := oSpectrums ;
    oObjects[tTank] := oTanks ;
    oObjects[tUserImages] := oUserImagess ;
    oObjects[tPinOutput] := oPinOutputs ;
    oObjects[tPinInput] := oPinInputs ;
    oObjects[t4Dbutton] := o4Dbuttons ;
    oObjects[tAniButton] := oAniButtons ;
    oObjects[tColorPicker] := oColorPickers ;
    oObjects[tUserButton] := oUserButtons ;
// Start P4.inc
    // init comms
    com_Init(comRX,CMDLenMAX,0);
    com_SetBaud(COM0,960);
    com_TXbuffer(comTX, 100, 0);
    // tag 'real' objects
    for (i := 0; i <= MaxTotObjects; i++)
        if (   (i != tSounds)
            && (i != tTimer)
            && (i != tPinOutput)
            && (i != tPinInput) )
            TouchXpos := oObjects[i] ;
            TouchYpos := *(TouchXpos) ;
            for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
                oldn := *(TouchXpos+ImageTouched*2) ;
                img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
                if (oldn != -1)
                    img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
                    img_Disable(hndl, oldn) ;
                endif
            next
        endif
    next

    // display initial form
    CurrentForm := -1 ;
// End P4.inc
// Start P5.inc
    ActivateForm(0) ; // need to change this according to first actual form

// End P5.inc
// Start P6.inc
    touch_Set(TOUCH_ENABLE);                            // enable the touch screen
    oldn := -1 ;
    repeat

        // check comms for command, how to NAK invalid command
        if (com_Count() != 0)
            i := serin() ;
            InputCS ^= i ;               // update checksum
                cmd[cmdi++] := i ;
                 if (   (cmd[0] == READ_OBJ)
                         && (cmdi == 4)         )
                    if (InputCS)
                        nak0() ;
                    else
                        ReadObject(cmd[1], cmd[2]) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
                         && (cmdi == 6)          )
                    if (InputCS)
                        nak0() ;
                    else
                        WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (   (cmd[0] == WRITE_CONTRAST)
                         && (cmdi == 3)         )
                    if (InputCS)
                        nak0() ;
                    else
                        gfx_Contrast(cmd[1]) ;
                        serout(ACK) ;
                    endif
                    cmdi := 0 ;
                else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
                    nak0() ;
                    cmdi := 0 ;
                endif
        endif   // a character is available


    // touch code processing

        TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
        ImageTouched := img_Touched(hndl,-1) ;
        if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
            if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
                TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
            endif
            if (TouchStatus != TOUCH_RELEASED)        // if not released
                if (oldn != -1)
                    ImageTouched := oldn ;
                else
                    if (oldn != ImageTouched)
                oldn := ImageTouched ;
                        TouchStatus := TOUCH_PRESSED ;
                    endif
                endif
                TouchXpos  := touch_Get(TOUCH_GETX);
                TouchYpos  := touch_Get(TOUCH_GETY);
                TouchState := Ofs_IPD_DOWN ;
            else
                ImageTouched := oldn ;                     // simulate release of what we touched
                oldn := -1 ;                    // prevent double release
                TouchState := Ofs_IPD_RELEASE ;
            endif
            if (ImageTouched != -1)
                        CurInputData := InputControls[ImageTouched] + InputData;
                        InputType := *(CurInputData) ;
                        i := InputType ;
                        if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
                        gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
            endif
        endif
 //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it

        sys_EventsResume() ;
    forever

cDipswitch:

cKnob:

cRockerswitch:

cRotaryswitch:

cSlider:
cTrackbar:

c4DButton:
cUserButton:
cWinbutton:
    pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
gbutton:
    i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
    if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
        if (TouchStatus == TOUCH_RELEASED)
            i &= 0xfffe ;
            TouchState == Ofs_IPD_DOWN ;
        else
            i |= 1 ;
            TouchState == Ofs_IPD_RELEASE ;
        endif
    else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
        if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
            if ((i & 3) == 3)
                i &= 0xfffc ;
            else
                i++ ;
            endif
        else
            i |= 1 ;                                      // make down regardless of current state
        endif
    else                        // group action, up all other buttons on touch press, reports 0 for button down
        if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
            TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
        endif
        i := (i & 0xfffc) | 2 ;
    endif

    UpdateObjects(i) ;
endsub ;

cAniButton:

cColorPicker:

endfunc
// End P6.inc
